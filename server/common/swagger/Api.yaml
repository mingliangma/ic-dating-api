swagger: '2.0'
info:
  description: Api specs for ICDating
  version: 1.0.0-b1
  title: IC Dating API
  contact:
    email: charlie@aworkingapp.com
basePath: /api/v1
tags:
  - name: account
    description: Everything about account account
schemes:
  - http
paths:
  /account/me:
    get:
      tags:
        - account
      summary: Verify API token to see it its still valid
      description: ''
      operationId: verifyApiToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          required: true
          type: string
      responses:
        '200':
          description: Token still valid
          schema:
            $ref: '#/definitions/AccountVM'
        '401':
          description: Token is no longer valid
  '/account/verify/phone/{phoneNum}':
    post:
      tags:
        - account
      summary: 'Verify account phone number, sends out verification code if necessary'
      description: ''
      operationId: verifyPhoneNumber
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: phoneNum
          in: path
          description: Phone number of current account. The number must be in the E.164 Format. Eg. +14155552671 for Country Code 1, +442071838750 for Country Code 44.
          required: true
          type: string
        - in: query
          name: disableSMS
          type: boolean
          description: if true send SMS is disabled. The OTP code can be retrieve through API response.
          default: false
        - in: query
          name: disablePasswordLogin
          type: boolean
          description: if true, the API will force to return a OTP code
          default: false
      responses:
        '200':
          description: Account already exist and account can use password to login
        '201':
          description:
            Verification code sent, and record created, regardless whether user
            has sent the reuqest before
          schema:
            type: object
            properties:
              codeForTesting:
                type: string
              message:
                type: string
              success:
                type: boolean
        '400':
          description: Invalid Request
        '500':
          description: Server internal error
  '/account/verify/phone/{phoneNum}/code/{code}':
    post:
      tags:
        - account
      summary: 'Verify account phone number, sends out verification code if necessary'
      description: ''
      operationId: verifyVerificationCode
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: phoneNum
          in: path
          description: phone number of current account
          required: true
          type: string
        - name: code
          in: path
          description: verification code client received
          required: true
          type: string
      responses:
        '200':
          description: Successfully verfied, an empty account is created, token is generated
          schema:
            type: object
            properties:
              token:
                type: string
              userId:
                type: string
              success:
                type: boolean
        '400':
          description: 'Invalid Request, or wrong verification code'
        '401':
          description: 'Fail to verify verification code, it may goes expired or wrong'
        '403':
          description: 'The phone number already exist'
        '500':
          description: Server internal error
  /account:
    put:
      tags:
        - account
      summary: Initialize an account with mandatory information, and respond with a web token
      operationId: registerAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          description: temperoy token issued by the server for Account registeration
          required: true
          type: string
        - name: account
          in: body
          description: account to create
          required: true
          schema:
            $ref: '#/definitions/AccountCreation'
      responses:
        '201':
          description: >-
            Successfully initialized the account
          schema:
            $ref: '#/definitions/AccountVM'
  /account/login:
    post:
      tags:
        - account
      summary: Login a account Account
      operationId: loginAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account
          in: body
          description: account to create
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '201':
          description: >-
            Successfully created account, a response token is generated for
            accessing APIs
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: Fail to login
  /account/{accountId}:
    get:
      tags:
      - account
      summary: Get account info by account ID
      operationId: getAccountByUserId
      produces:
        - application/json
      parameters:
      - name: accountId
        in: path
        description: The account that needs to be fetched.
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AccountVM'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - account
      summary: Updated account account
      description: This can only be done by the logged in account.
      operationId: updateAccount
      produces:
      - application/json
      parameters:
      - name: accountId
        in: path
        description: acountId that need to be updated
        required: true
        type: string
      - name: token
        description: The web token returned at login or registration
        in: header
        required: true
        type: string
      - in: body
        name: body
        description: Updated account object
        schema:
          $ref: '#/definitions/AccountUpdate'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/AccountVM'
        400:
          description: Invalid account supplied
        404:
          description: Account not found
          
  /account/{accountId}/image:
    put:
      tags:
      - account
      summary: Add a new picture url to the account
      operationId: addPhoto
      produces:
        - application/json
      parameters:
      - name: accountId
        in: path
        description: The account that needs to be fetched.
        required: true
        type: string
      - name: token
        description: The web token returned at login or registration
        in: header
        required: true
        type: string
      - in: body
        name: body
        description: The picture url to be added
        schema:
          type: object
          required:
            - pictureUrl
          properties:
            pictureUrl:
              type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              pictureUrl:
                type: array
                items:
                    type: string
        401:
          description: Invalid token
        404:
          description: User not found
    delete:
      tags:
      - account
      summary: delete picture url from the account
      operationId: addPhoto
      produces:
        - application/json
      parameters:
      - name: accountId
        in: path
        description: The account that needs to be fetched.
        required: true
        type: string
      - name: token
        description: The web token returned at login or registration
        in: header
        required: true
        type: string
      - in: body
        name: body
        description: The picture url to be removed
        schema:
          type: object
          required:
            - pictureUrl
          properties:
            pictureUrl:
              type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              pictureUrl:
                type: array
                items:
                    type: string
        401:
          description: Invalid token
        404:
          description: User not found
  /account/{accountId}/image/gen-presigned-url:
    get:
      tags:
      - account
      summary: To request that S3 generates a temporary URL where you can upload your file. This URL is valid only for 60 seconds, as per the Expires option.
      operationId: generatePresignedUrl
      produces:
        - application/json
      parameters:
      - name: accountId
        in: path
        description: The account that needs to be fetched.
        required: true
        type: string
      - name: token
        description: The web token returned at login or registration
        in: header
        required: true
        type: string
      - name: fileName
        in: query
        description: The name of the file to be uploaded
        required: true
        type: string
      - name: fileType
        in: query
        description: The type of the file to be uploaded in MIME format. eg. image/png, image/jpeg
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/GenPresignedUrlSuccessResponse'
        400:
          description: Invalid accountId supplied
        404:
          description: User not found

  /account/{accountId}/location:
    put:
      tags:
      - account
      summary: update my location coordinate
      operationId: updateMyLocaion
      produces:
        - application/json
      parameters:
      - name: accountId
        in: path
        description: The account that needs to be fetched.
        required: true
        type: string
      - name: token
        description: The web token returned at login or registration
        in: header
        required: true
        type: string
      - in: body
        name: body
        description: The picture url to be added
        schema:
          type: object
          properties:
            longitude:
              type: number
            latitude:
              type: number
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              successful:
                type: boolean
        401:
          description: Invalid token
        404:
          description: User not found
  /account/list:
    get:
      tags:
      - discovery
      summary:
      operationId: search
      produces:
        - application/json
      parameters:
      - name: gender
        in: query
        description: male, female, or both
        required: false
        type: string
      - name: ageMin
        in: query
        description: 18-99
        required: false
        type: integer
      - name: ageMax
        in: query
        description: 18-99
        required: false
        type: integer
      - name: ethnicity
        in: query
        description: Asian, black, latin, indian, native_american, caucasian, other
        required: false
        type: string
      - name: sign
        in: query
        description: sign id with - as seperator. ex 1-2-3-4-5
        required: false
        type: string
      - name: page
        in: query
        description: The response page in the account list
        required: false
        type: number
      - name: limit
        in: query
        description: The number of items to return
        required: false
        type: number
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              totalPages:
                type: number
              limit:
                type: number
              page:
                type: number
              list:
                type: array
                items:
                  $ref: '#/definitions/AccountVM'
        400:
          description: Invalid accountId supplied
        404:
          description: User not found

  /discovery/myAccountId/{myAccountId}:
    get:
      tags:
      - discovery
      summary: Discovery users
      operationId: search
      produces:
        - application/json
      parameters:
      - name: myAccountId
        in: path
        description: my account Id
        required: true
        type: string
      - name: latitude
        in: query
        description: The user's latitude. eg. 43.7659095
        required: true
        type: number
      - name: longitude
        in: query
        description: The user's longitude. eg. -79.4141207
        required: true
        type: number
      - name: maxDistance
        in: query
        description: max distance in meter. default value is 2000m
        required: false
        type: number
      - name: gender
        in: query
        description: male, female, or both
        required: false
        type: string
      - name: ageMin
        in: query
        description: 18-99
        required: false
        type: integer
      - name: ageMax
        in: query
        description: 18-99
        required: false
        type: integer
      - name: ethnicity
        in: query
        description: Asian, black, latin, indian, native_american, caucasian, other
        required: false
        type: string
      - name: sign
        in: query
        description: sign id with - as seperator. ex 1-2-3-4-5
        required: false
        type: string
      - name: page
        in: query
        description: The response page in the account list
        required: false
        type: number
      - name: limit
        in: query
        description: The number of items to return
        required: false
        type: number

      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              totalPages:
                type: number
              limit:
                type: number
              page:
                type: number
              list:
                type: array
                items:
                  $ref: '#/definitions/AccountVM'
        400:
          description: Invalid accountId supplied
        404:
          description: User not found

  /discovery/hide/initiator/{initiatorAccountId}/receiver/{receiverAccountId}:
    post:
      tags:
        - discovery
      summary: Hide the receiver from the initiator.
      operationId: hideUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: initiatorAccountId
        in: path
        description: The user who perform the action of hiding someone in their discovery list
        required: true
        type: string
      - name: receiverAccountId
        in: path
        description: The user who received the hiding action and being hidden from the initiator
        required: true
        type: string
      responses:
        '201':
          description: successful operation
  /sign:
    get:
      tags:
        - sign
      summary: Get all signs
      description: ''
      operationId: getSigns
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: List of signs

definitions:
  Token:
    type: object
    properties:
      token:
        type: string
  Login:
    type: object
    properties:
      phoneNum:
        type: string
      password:
        type: string
  AccountVM:
    type: object
    properties:
      accountId:
        type: string
      displayName:
        type: string
      ethnicity:
        type: string
      dateOfBirth:
        type: string
      gender:
        type: string
      distance:
        type: integer
      pictureUrl:
        type: array
        items:
          type: string
      pictureThumbnailUrl:
        type: array
        items:
          type: string
      signId:
        type: array
        items:
          $ref: '#/definitions/Sign'
  AccountUpdate:
    type: object
    properties:
      signId:
        type: array
        items:
            type: integer
      description:
        type: string
      pictureUrl:
        type: array
        items:
          type: string
  AccountCreation:
    type: object
    properties:
      password:
        type: string
      displayName:
        type: string
      ethnicity:
        type: string
      dateOfBirth:
        type: string
      gender:
        type: string
  Sign:
    type: object
    properties:
      signId:
        type: integer
      signName:
        type: string
      signIconUrl:
        type: string
      order:
        type: integer
        
  ProfilePictureList:
    type: object
    properties:
      pictures:
        type: array
        items:
          type: string
          
  ProfilePicture:
    type: object
    properties:
      url:
        type: string

  GenPresignedUrlSuccessResponse:
    type: object
    properties:
      signedURL:
        type: string
        description: The AWS S3 pre-signed URL for put opertion.
      fileLink:
        type: string
        description: The link to the file uploaded.


